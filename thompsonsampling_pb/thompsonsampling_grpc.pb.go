// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pbschema/thompsonsampling/thompsonsampling.proto

package thompsonsampling_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// THOMPSONSAMPLINGClient is the client API for THOMPSONSAMPLING service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type THOMPSONSAMPLINGClient interface {
	// meta
	GetMeta(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetaResponse, error)
	// Scope
	GetScopeInfo(ctx context.Context, in *Scope, opts ...grpc.CallOption) (*ScopeResponse, error)
	InScope(ctx context.Context, in *InScopeQuery, opts ...grpc.CallOption) (*InScopeResponse, error)
	// Candidate
	GetCandidateInfo(ctx context.Context, in *CandidateInfoQuery, opts ...grpc.CallOption) (*CandidateInfoResponse, error)
	//UpdateCandidate 更新参数
	UpdateCandidate(ctx context.Context, in *CandidateUpdateQuery, opts ...grpc.CallOption) (*CandidateUpdateResponse, error)
	// 操作
	//Rank 排序候选集
	Rank(ctx context.Context, in *RankQuery, opts ...grpc.CallOption) (*RankResponse, error)
	//Top 返回可能性最大的后选者
	Top(ctx context.Context, in *TopQuery, opts ...grpc.CallOption) (*TopResponse, error)
}

type tHOMPSONSAMPLINGClient struct {
	cc grpc.ClientConnInterface
}

func NewTHOMPSONSAMPLINGClient(cc grpc.ClientConnInterface) THOMPSONSAMPLINGClient {
	return &tHOMPSONSAMPLINGClient{cc}
}

func (c *tHOMPSONSAMPLINGClient) GetMeta(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, "/thompsonsampling.THOMPSONSAMPLING/GetMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tHOMPSONSAMPLINGClient) GetScopeInfo(ctx context.Context, in *Scope, opts ...grpc.CallOption) (*ScopeResponse, error) {
	out := new(ScopeResponse)
	err := c.cc.Invoke(ctx, "/thompsonsampling.THOMPSONSAMPLING/GetScopeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tHOMPSONSAMPLINGClient) InScope(ctx context.Context, in *InScopeQuery, opts ...grpc.CallOption) (*InScopeResponse, error) {
	out := new(InScopeResponse)
	err := c.cc.Invoke(ctx, "/thompsonsampling.THOMPSONSAMPLING/InScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tHOMPSONSAMPLINGClient) GetCandidateInfo(ctx context.Context, in *CandidateInfoQuery, opts ...grpc.CallOption) (*CandidateInfoResponse, error) {
	out := new(CandidateInfoResponse)
	err := c.cc.Invoke(ctx, "/thompsonsampling.THOMPSONSAMPLING/GetCandidateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tHOMPSONSAMPLINGClient) UpdateCandidate(ctx context.Context, in *CandidateUpdateQuery, opts ...grpc.CallOption) (*CandidateUpdateResponse, error) {
	out := new(CandidateUpdateResponse)
	err := c.cc.Invoke(ctx, "/thompsonsampling.THOMPSONSAMPLING/UpdateCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tHOMPSONSAMPLINGClient) Rank(ctx context.Context, in *RankQuery, opts ...grpc.CallOption) (*RankResponse, error) {
	out := new(RankResponse)
	err := c.cc.Invoke(ctx, "/thompsonsampling.THOMPSONSAMPLING/Rank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tHOMPSONSAMPLINGClient) Top(ctx context.Context, in *TopQuery, opts ...grpc.CallOption) (*TopResponse, error) {
	out := new(TopResponse)
	err := c.cc.Invoke(ctx, "/thompsonsampling.THOMPSONSAMPLING/Top", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// THOMPSONSAMPLINGServer is the server API for THOMPSONSAMPLING service.
// All implementations must embed UnimplementedTHOMPSONSAMPLINGServer
// for forward compatibility
type THOMPSONSAMPLINGServer interface {
	// meta
	GetMeta(context.Context, *emptypb.Empty) (*MetaResponse, error)
	// Scope
	GetScopeInfo(context.Context, *Scope) (*ScopeResponse, error)
	InScope(context.Context, *InScopeQuery) (*InScopeResponse, error)
	// Candidate
	GetCandidateInfo(context.Context, *CandidateInfoQuery) (*CandidateInfoResponse, error)
	//UpdateCandidate 更新参数
	UpdateCandidate(context.Context, *CandidateUpdateQuery) (*CandidateUpdateResponse, error)
	// 操作
	//Rank 排序候选集
	Rank(context.Context, *RankQuery) (*RankResponse, error)
	//Top 返回可能性最大的后选者
	Top(context.Context, *TopQuery) (*TopResponse, error)
	mustEmbedUnimplementedTHOMPSONSAMPLINGServer()
}

// UnimplementedTHOMPSONSAMPLINGServer must be embedded to have forward compatible implementations.
type UnimplementedTHOMPSONSAMPLINGServer struct {
}

func (UnimplementedTHOMPSONSAMPLINGServer) GetMeta(context.Context, *emptypb.Empty) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedTHOMPSONSAMPLINGServer) GetScopeInfo(context.Context, *Scope) (*ScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScopeInfo not implemented")
}
func (UnimplementedTHOMPSONSAMPLINGServer) InScope(context.Context, *InScopeQuery) (*InScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InScope not implemented")
}
func (UnimplementedTHOMPSONSAMPLINGServer) GetCandidateInfo(context.Context, *CandidateInfoQuery) (*CandidateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandidateInfo not implemented")
}
func (UnimplementedTHOMPSONSAMPLINGServer) UpdateCandidate(context.Context, *CandidateUpdateQuery) (*CandidateUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCandidate not implemented")
}
func (UnimplementedTHOMPSONSAMPLINGServer) Rank(context.Context, *RankQuery) (*RankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rank not implemented")
}
func (UnimplementedTHOMPSONSAMPLINGServer) Top(context.Context, *TopQuery) (*TopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Top not implemented")
}
func (UnimplementedTHOMPSONSAMPLINGServer) mustEmbedUnimplementedTHOMPSONSAMPLINGServer() {}

// UnsafeTHOMPSONSAMPLINGServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to THOMPSONSAMPLINGServer will
// result in compilation errors.
type UnsafeTHOMPSONSAMPLINGServer interface {
	mustEmbedUnimplementedTHOMPSONSAMPLINGServer()
}

func RegisterTHOMPSONSAMPLINGServer(s grpc.ServiceRegistrar, srv THOMPSONSAMPLINGServer) {
	s.RegisterService(&THOMPSONSAMPLING_ServiceDesc, srv)
}

func _THOMPSONSAMPLING_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(THOMPSONSAMPLINGServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thompsonsampling.THOMPSONSAMPLING/GetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(THOMPSONSAMPLINGServer).GetMeta(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _THOMPSONSAMPLING_GetScopeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Scope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(THOMPSONSAMPLINGServer).GetScopeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thompsonsampling.THOMPSONSAMPLING/GetScopeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(THOMPSONSAMPLINGServer).GetScopeInfo(ctx, req.(*Scope))
	}
	return interceptor(ctx, in, info, handler)
}

func _THOMPSONSAMPLING_InScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InScopeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(THOMPSONSAMPLINGServer).InScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thompsonsampling.THOMPSONSAMPLING/InScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(THOMPSONSAMPLINGServer).InScope(ctx, req.(*InScopeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _THOMPSONSAMPLING_GetCandidateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CandidateInfoQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(THOMPSONSAMPLINGServer).GetCandidateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thompsonsampling.THOMPSONSAMPLING/GetCandidateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(THOMPSONSAMPLINGServer).GetCandidateInfo(ctx, req.(*CandidateInfoQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _THOMPSONSAMPLING_UpdateCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CandidateUpdateQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(THOMPSONSAMPLINGServer).UpdateCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thompsonsampling.THOMPSONSAMPLING/UpdateCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(THOMPSONSAMPLINGServer).UpdateCandidate(ctx, req.(*CandidateUpdateQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _THOMPSONSAMPLING_Rank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(THOMPSONSAMPLINGServer).Rank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thompsonsampling.THOMPSONSAMPLING/Rank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(THOMPSONSAMPLINGServer).Rank(ctx, req.(*RankQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _THOMPSONSAMPLING_Top_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(THOMPSONSAMPLINGServer).Top(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thompsonsampling.THOMPSONSAMPLING/Top",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(THOMPSONSAMPLINGServer).Top(ctx, req.(*TopQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// THOMPSONSAMPLING_ServiceDesc is the grpc.ServiceDesc for THOMPSONSAMPLING service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var THOMPSONSAMPLING_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thompsonsampling.THOMPSONSAMPLING",
	HandlerType: (*THOMPSONSAMPLINGServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMeta",
			Handler:    _THOMPSONSAMPLING_GetMeta_Handler,
		},
		{
			MethodName: "GetScopeInfo",
			Handler:    _THOMPSONSAMPLING_GetScopeInfo_Handler,
		},
		{
			MethodName: "InScope",
			Handler:    _THOMPSONSAMPLING_InScope_Handler,
		},
		{
			MethodName: "GetCandidateInfo",
			Handler:    _THOMPSONSAMPLING_GetCandidateInfo_Handler,
		},
		{
			MethodName: "UpdateCandidate",
			Handler:    _THOMPSONSAMPLING_UpdateCandidate_Handler,
		},
		{
			MethodName: "Rank",
			Handler:    _THOMPSONSAMPLING_Rank_Handler,
		},
		{
			MethodName: "Top",
			Handler:    _THOMPSONSAMPLING_Top_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pbschema/thompsonsampling/thompsonsampling.proto",
}
