// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: pbschema/thompsonsampling/thompsonsampling.proto

package thompsonsampling_pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CandidateUpdateQuery_UpdateMod int32

const (
	CandidateUpdateQuery_INCR  CandidateUpdateQuery_UpdateMod = 0 //增加
	CandidateUpdateQuery_RESET CandidateUpdateQuery_UpdateMod = 1 //重置
)

// Enum value maps for CandidateUpdateQuery_UpdateMod.
var (
	CandidateUpdateQuery_UpdateMod_name = map[int32]string{
		0: "INCR",
		1: "RESET",
	}
	CandidateUpdateQuery_UpdateMod_value = map[string]int32{
		"INCR":  0,
		"RESET": 1,
	}
)

func (x CandidateUpdateQuery_UpdateMod) Enum() *CandidateUpdateQuery_UpdateMod {
	p := new(CandidateUpdateQuery_UpdateMod)
	*p = x
	return p
}

func (x CandidateUpdateQuery_UpdateMod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CandidateUpdateQuery_UpdateMod) Descriptor() protoreflect.EnumDescriptor {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_enumTypes[0].Descriptor()
}

func (CandidateUpdateQuery_UpdateMod) Type() protoreflect.EnumType {
	return &file_pbschema_thompsonsampling_thompsonsampling_proto_enumTypes[0]
}

func (x CandidateUpdateQuery_UpdateMod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CandidateUpdateQuery_UpdateMod.Descriptor instead.
func (CandidateUpdateQuery_UpdateMod) EnumDescriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{11, 0}
}

//通用
type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Business string `protobuf:"bytes,1,opt,name=business,proto3" json:"business,omitempty"`
	Target   string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{0}
}

func (x *Scope) GetBusiness() string {
	if x != nil {
		return x.Business
	}
	return ""
}

func (x *Scope) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type BetaParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alpha float64 `protobuf:"fixed64,1,opt,name=alpha,proto3" json:"alpha,omitempty" redis:"alpha"`
	Beta  float64 `protobuf:"fixed64,2,opt,name=beta,proto3" json:"beta,omitempty" redis:"beta"`
}

func (x *BetaParam) Reset() {
	*x = BetaParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetaParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetaParam) ProtoMessage() {}

func (x *BetaParam) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetaParam.ProtoReflect.Descriptor instead.
func (*BetaParam) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{1}
}

func (x *BetaParam) GetAlpha() float64 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *BetaParam) GetBeta() float64 {
	if x != nil {
		return x.Beta
	}
	return 0
}

//meta
type NamespaceSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ALGO                string `protobuf:"bytes,1,opt,name=ALGO,proto3" json:"ALGO,omitempty"`
	ALGOMeta            string `protobuf:"bytes,2,opt,name=ALGOMeta,proto3" json:"ALGOMeta,omitempty"`
	DefaultBusinessName string `protobuf:"bytes,3,opt,name=DefaultBusinessName,proto3" json:"DefaultBusinessName,omitempty"`
	DefaultTargetName   string `protobuf:"bytes,4,opt,name=DefaultTargetName,proto3" json:"DefaultTargetName,omitempty"`
}

func (x *NamespaceSetting) Reset() {
	*x = NamespaceSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceSetting) ProtoMessage() {}

func (x *NamespaceSetting) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceSetting.ProtoReflect.Descriptor instead.
func (*NamespaceSetting) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{2}
}

func (x *NamespaceSetting) GetALGO() string {
	if x != nil {
		return x.ALGO
	}
	return ""
}

func (x *NamespaceSetting) GetALGOMeta() string {
	if x != nil {
		return x.ALGOMeta
	}
	return ""
}

func (x *NamespaceSetting) GetDefaultBusinessName() string {
	if x != nil {
		return x.DefaultBusinessName
	}
	return ""
}

func (x *NamespaceSetting) GetDefaultTargetName() string {
	if x != nil {
		return x.DefaultTargetName
	}
	return ""
}

type MetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// redis连接设置
	RedisURL                    string            `protobuf:"bytes,1,opt,name=RedisURL,proto3" json:"RedisURL,omitempty"`
	QueryRedisTimeout           int64             `protobuf:"varint,2,opt,name=QueryRedisTimeout,proto3" json:"QueryRedisTimeout,omitempty"`
	Redis_RouteMod              string            `protobuf:"bytes,3,opt,name=Redis_RouteMod,json=RedisRouteMod,proto3" json:"Redis_RouteMod,omitempty"`
	DefaultKeyTTL               int64             `protobuf:"varint,4,opt,name=DefaultKeyTTL,proto3" json:"DefaultKeyTTL,omitempty"`
	NamespaceSetting            *NamespaceSetting `protobuf:"bytes,5,opt,name=namespace_setting,json=namespaceSetting,proto3" json:"namespace_setting,omitempty"`
	ScopeObserveMode            bool              `protobuf:"varint,6,opt,name=scope_observe_mode,json=scopeObserveMode,proto3" json:"scope_observe_mode,omitempty"`
	ScopeObserveModeEtcdurl     string            `protobuf:"bytes,7,opt,name=scope_observe_mode_etcdurl,json=scopeObserveModeEtcdurl,proto3" json:"scope_observe_mode_etcdurl,omitempty"`
	ScopeObserveModeConntimeout int64             `protobuf:"varint,8,opt,name=scope_observe_mode_conntimeout,json=scopeObserveModeConntimeout,proto3" json:"scope_observe_mode_conntimeout,omitempty"`
}

func (x *MetaResponse) Reset() {
	*x = MetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaResponse) ProtoMessage() {}

func (x *MetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaResponse.ProtoReflect.Descriptor instead.
func (*MetaResponse) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{3}
}

func (x *MetaResponse) GetRedisURL() string {
	if x != nil {
		return x.RedisURL
	}
	return ""
}

func (x *MetaResponse) GetQueryRedisTimeout() int64 {
	if x != nil {
		return x.QueryRedisTimeout
	}
	return 0
}

func (x *MetaResponse) GetRedis_RouteMod() string {
	if x != nil {
		return x.Redis_RouteMod
	}
	return ""
}

func (x *MetaResponse) GetDefaultKeyTTL() int64 {
	if x != nil {
		return x.DefaultKeyTTL
	}
	return 0
}

func (x *MetaResponse) GetNamespaceSetting() *NamespaceSetting {
	if x != nil {
		return x.NamespaceSetting
	}
	return nil
}

func (x *MetaResponse) GetScopeObserveMode() bool {
	if x != nil {
		return x.ScopeObserveMode
	}
	return false
}

func (x *MetaResponse) GetScopeObserveModeEtcdurl() string {
	if x != nil {
		return x.ScopeObserveModeEtcdurl
	}
	return ""
}

func (x *MetaResponse) GetScopeObserveModeConntimeout() int64 {
	if x != nil {
		return x.ScopeObserveModeConntimeout
	}
	return 0
}

//Scop
type ScopeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64            `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	List  map[string]int64 `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ScopeResponse) Reset() {
	*x = ScopeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeResponse) ProtoMessage() {}

func (x *ScopeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeResponse.ProtoReflect.Descriptor instead.
func (*ScopeResponse) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{4}
}

func (x *ScopeResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ScopeResponse) GetList() map[string]int64 {
	if x != nil {
		return x.List
	}
	return nil
}

type InScopeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope      *Scope   `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Candidates []string `protobuf:"bytes,2,rep,name=candidates,proto3" json:"candidates,omitempty"`
}

func (x *InScopeQuery) Reset() {
	*x = InScopeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InScopeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InScopeQuery) ProtoMessage() {}

func (x *InScopeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InScopeQuery.ProtoReflect.Descriptor instead.
func (*InScopeQuery) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{5}
}

func (x *InScopeQuery) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *InScopeQuery) GetCandidates() []string {
	if x != nil {
		return x.Candidates
	}
	return nil
}

type InScopeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result map[string]bool `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *InScopeResponse) Reset() {
	*x = InScopeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InScopeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InScopeResponse) ProtoMessage() {}

func (x *InScopeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InScopeResponse.ProtoReflect.Descriptor instead.
func (*InScopeResponse) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{6}
}

func (x *InScopeResponse) GetResult() map[string]bool {
	if x != nil {
		return x.Result
	}
	return nil
}

//Candidate
type CandidateInfoQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope      *Scope   `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Candidates []string `protobuf:"bytes,2,rep,name=candidates,proto3" json:"candidates,omitempty"`
}

func (x *CandidateInfoQuery) Reset() {
	*x = CandidateInfoQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateInfoQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateInfoQuery) ProtoMessage() {}

func (x *CandidateInfoQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateInfoQuery.ProtoReflect.Descriptor instead.
func (*CandidateInfoQuery) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{7}
}

func (x *CandidateInfoQuery) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *CandidateInfoQuery) GetCandidates() []string {
	if x != nil {
		return x.Candidates
	}
	return nil
}

type CandidateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *BetaParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
	Ttl   int64      `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *CandidateInfo) Reset() {
	*x = CandidateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateInfo) ProtoMessage() {}

func (x *CandidateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateInfo.ProtoReflect.Descriptor instead.
func (*CandidateInfo) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{8}
}

func (x *CandidateInfo) GetParam() *BetaParam {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *CandidateInfo) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type CandidateInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos map[string]*CandidateInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CandidateInfoResponse) Reset() {
	*x = CandidateInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateInfoResponse) ProtoMessage() {}

func (x *CandidateInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateInfoResponse.ProtoReflect.Descriptor instead.
func (*CandidateInfoResponse) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{9}
}

func (x *CandidateInfoResponse) GetInfos() map[string]*CandidateInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CandidateUpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidate string     `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
	Param     *BetaParam `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *CandidateUpdateInfo) Reset() {
	*x = CandidateUpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateUpdateInfo) ProtoMessage() {}

func (x *CandidateUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateUpdateInfo.ProtoReflect.Descriptor instead.
func (*CandidateUpdateInfo) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{10}
}

func (x *CandidateUpdateInfo) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

func (x *CandidateUpdateInfo) GetParam() *BetaParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type CandidateUpdateQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope               *Scope                         `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	UpdateType          CandidateUpdateQuery_UpdateMod `protobuf:"varint,2,opt,name=update_type,json=updateType,proto3,enum=thompsonsampling.CandidateUpdateQuery_UpdateMod" json:"update_type,omitempty"`
	Ttl                 int64                          `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	CandidateUpdateInfo []*CandidateUpdateInfo         `protobuf:"bytes,5,rep,name=candidate_update_info,json=candidateUpdateInfo,proto3" json:"candidate_update_info,omitempty"`
}

func (x *CandidateUpdateQuery) Reset() {
	*x = CandidateUpdateQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateUpdateQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateUpdateQuery) ProtoMessage() {}

func (x *CandidateUpdateQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateUpdateQuery.ProtoReflect.Descriptor instead.
func (*CandidateUpdateQuery) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{11}
}

func (x *CandidateUpdateQuery) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *CandidateUpdateQuery) GetUpdateType() CandidateUpdateQuery_UpdateMod {
	if x != nil {
		return x.UpdateType
	}
	return CandidateUpdateQuery_INCR
}

func (x *CandidateUpdateQuery) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *CandidateUpdateQuery) GetCandidateUpdateInfo() []*CandidateUpdateInfo {
	if x != nil {
		return x.CandidateUpdateInfo
	}
	return nil
}

type CandidateUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CandidateUpdateInfo []*CandidateUpdateInfo `protobuf:"bytes,1,rep,name=candidate_update_info,json=candidateUpdateInfo,proto3" json:"candidate_update_info,omitempty"`
}

func (x *CandidateUpdateResponse) Reset() {
	*x = CandidateUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateUpdateResponse) ProtoMessage() {}

func (x *CandidateUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateUpdateResponse.ProtoReflect.Descriptor instead.
func (*CandidateUpdateResponse) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{12}
}

func (x *CandidateUpdateResponse) GetCandidateUpdateInfo() []*CandidateUpdateInfo {
	if x != nil {
		return x.CandidateUpdateInfo
	}
	return nil
}

//操作
type RankQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope      *Scope   `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Desc       bool     `protobuf:"varint,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Candidates []string `protobuf:"bytes,3,rep,name=candidates,proto3" json:"candidates,omitempty"`
}

func (x *RankQuery) Reset() {
	*x = RankQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankQuery) ProtoMessage() {}

func (x *RankQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankQuery.ProtoReflect.Descriptor instead.
func (*RankQuery) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{13}
}

func (x *RankQuery) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *RankQuery) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

func (x *RankQuery) GetCandidates() []string {
	if x != nil {
		return x.Candidates
	}
	return nil
}

type WeightedCandidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidate string  `protobuf:"bytes,1,opt,name=Candidate,proto3" json:"Candidate,omitempty"`
	Weight    float64 `protobuf:"fixed64,2,opt,name=Weight,proto3" json:"Weight,omitempty"`
}

func (x *WeightedCandidate) Reset() {
	*x = WeightedCandidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightedCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedCandidate) ProtoMessage() {}

func (x *WeightedCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedCandidate.ProtoReflect.Descriptor instead.
func (*WeightedCandidate) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{14}
}

func (x *WeightedCandidate) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

func (x *WeightedCandidate) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type RankResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderedCandidates []*WeightedCandidate `protobuf:"bytes,1,rep,name=ordered_candidates,json=orderedCandidates,proto3" json:"ordered_candidates,omitempty"`
}

func (x *RankResponse) Reset() {
	*x = RankResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankResponse) ProtoMessage() {}

func (x *RankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankResponse.ProtoReflect.Descriptor instead.
func (*RankResponse) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{15}
}

func (x *RankResponse) GetOrderedCandidates() []*WeightedCandidate {
	if x != nil {
		return x.OrderedCandidates
	}
	return nil
}

type TopQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope      *Scope   `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Candidates []string `protobuf:"bytes,2,rep,name=candidates,proto3" json:"candidates,omitempty"`
}

func (x *TopQuery) Reset() {
	*x = TopQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopQuery) ProtoMessage() {}

func (x *TopQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopQuery.ProtoReflect.Descriptor instead.
func (*TopQuery) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{16}
}

func (x *TopQuery) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *TopQuery) GetCandidates() []string {
	if x != nil {
		return x.Candidates
	}
	return nil
}

type TopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidate string `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (x *TopResponse) Reset() {
	*x = TopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopResponse) ProtoMessage() {}

func (x *TopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopResponse.ProtoReflect.Descriptor instead.
func (*TopResponse) Descriptor() ([]byte, []int) {
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP(), []int{17}
}

func (x *TopResponse) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

var File_pbschema_thompsonsampling_thompsonsampling_proto protoreflect.FileDescriptor

var file_pbschema_thompsonsampling_thompsonsampling_proto_rawDesc = []byte{
	0x0a, 0x30, 0x70, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x74, 0x68, 0x6f, 0x6d, 0x70,
	0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x68, 0x6f, 0x6d,
	0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x1a, 0x25, 0x70, 0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x70, 0x62, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc1, 0x02, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x76, 0x0a, 0x08, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5a, 0x92,
	0x41, 0x57, 0x32, 0x55, 0xe9, 0x92, 0x88, 0xe5, 0xaf, 0xb9, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1,
	0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe7, 0x9a, 0x84, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x2c,
	0xe7, 0xa9, 0xba, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe5, 0x90, 0xab, 0xe4,
	0xb9, 0x89, 0xe4, 0xb8, 0xba, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0x2c, 0x72, 0x65, 0x64, 0x69,
	0x73, 0xe4, 0xb8, 0xad, 0xe4, 0xbb, 0xa5, 0x60, 0x5f, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x5f, 0x60, 0xe6, 0x9b, 0xbf, 0xe4, 0xbb, 0xa3, 0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x84, 0x01, 0x92, 0x41, 0x80, 0x01, 0x32, 0x7e, 0xe9, 0x92, 0x88,
	0xe5, 0xaf, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe7,
	0x9a, 0x84, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x2c, 0xe6, 0x8c, 0x87, 0xe4, 0xbb, 0xa3, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x2c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x88, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0xad, 0x89, 0xe9, 0x80, 0xbb, 0xe8, 0xbe, 0x91, 0xe6, 0xa6, 0x82, 0xe5, 0xbf,
	0xb5, 0x2c, 0xe7, 0xa9, 0xba, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe5, 0x90,
	0xab, 0xe4, 0xb9, 0x89, 0xe4, 0xb8, 0xba, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0x2c, 0x72, 0x65,
	0x64, 0x69, 0x73, 0xe4, 0xb8, 0xad, 0xe4, 0xbb, 0xa5, 0x60, 0x5f, 0x5f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x5f, 0x60, 0xe6, 0x9b, 0xbf, 0xe4, 0xbb, 0xa3, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x3a, 0x20, 0x92, 0x41, 0x1d, 0x0a, 0x1b, 0x2a, 0x05, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x32, 0x12, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8,
	0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x22, 0xa0, 0x01, 0x0a, 0x09, 0x42, 0x65, 0x74, 0x61, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0xe5, 0x80, 0x99, 0xe9, 0x80, 0x89, 0xe4,
	0xba, 0xba, 0xe7, 0x9a, 0x84, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16, 0xe5, 0x80, 0x99, 0xe9,
	0x80, 0x89, 0xe4, 0xba, 0xba, 0xe7, 0x9a, 0x84, 0x62, 0x65, 0x74, 0x61, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x52, 0x04, 0x62, 0x65, 0x74, 0x61, 0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29, 0x2a,
	0x09, 0x42, 0x65, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x1c, 0xe5, 0x80, 0x99, 0xe9,
	0x80, 0x89, 0xe4, 0xba, 0xba, 0xe7, 0x9a, 0x84, 0x62, 0x65, 0x74, 0x61, 0xe5, 0x88, 0x86, 0xe5,
	0xb8, 0x83, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xb7, 0x02, 0x0a, 0x10, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a,
	0x04, 0x41, 0x4c, 0x47, 0x4f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x32, 0x12, 0xe7, 0xae, 0x97, 0xe6, 0xb3, 0x95, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0x52, 0x04, 0x41, 0x4c, 0x47, 0x4f, 0x12, 0x3c, 0x0a, 0x08, 0x41, 0x4c,
	0x47, 0x4f, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x32, 0x1b, 0xe7, 0xae, 0x97, 0xe6, 0xb3, 0x95, 0xe5, 0x85, 0x83, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x08,
	0x41, 0x4c, 0x47, 0x4f, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe5, 0x90, 0x8d, 0x52, 0x13, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x42, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x32, 0x0f, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe5, 0x90,
	0x8d, 0x52, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x2c, 0x92, 0x41, 0x29, 0x0a, 0x27, 0x2a, 0x10, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x32, 0x13, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd,
	0xae, 0x2e, 0x22, 0xd2, 0x06, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x52, 0x65, 0x64, 0x69, 0x73, 0x55, 0x52, 0x4c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0xe4, 0xbf, 0x9d, 0xe5,
	0xad, 0x98, 0xe7, 0x82, 0xb9, 0xe5, 0x87, 0xbb, 0xe5, 0x92, 0x8c, 0xe6, 0x9c, 0xaa, 0xe7, 0x82,
	0xb9, 0xe5, 0x87, 0xbb, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9a, 0x84, 0x72, 0x65, 0x64,
	0x69, 0x73, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x08, 0x52, 0x65, 0x64, 0x69, 0x73, 0x55,
	0x52, 0x4c, 0x12, 0x56, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x28, 0x92,
	0x41, 0x25, 0x32, 0x23, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x72, 0x65, 0x64, 0x69, 0x73, 0xe7,
	0x9a, 0x84, 0xe8, 0xb6, 0x85, 0xe6, 0x97, 0xb6, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x2c, 0xe5,
	0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0x6d, 0x73, 0x52, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x7a, 0x0a, 0x0e, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x5f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x53, 0x92, 0x41, 0x50, 0x32, 0x4e, 0x72, 0x65, 0x64, 0x69, 0x73, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x9e, 0xe6, 0x8e, 0xa5, 0xe7, 0xad, 0x96,
	0xe7, 0x95, 0xa5, 0x2c, 0x65, 0x6e, 0x75, 0x6d, 0x3d, 0x62, 0x79, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x2c, 0x65, 0x6e, 0x75, 0x6d, 0x3d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6c, 0x79,
	0x2c, 0x65, 0x6e, 0x75, 0x6d, 0x3d, 0x6e, 0x6f, 0x6e, 0x65, 0x2c, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x3d, 0x6e, 0x6f, 0x6e, 0x65, 0x52, 0x0d, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x12, 0x51, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4b, 0x65, 0x79, 0x54, 0x54, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2b, 0x92,
	0x41, 0x28, 0x32, 0x26, 0xe4, 0xbf, 0x9d, 0xe5, 0xad, 0x98, 0xe9, 0x94, 0xae, 0xe7, 0x9a, 0x84,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x2c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0x73, 0x52, 0x0d, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4b, 0x65, 0x79, 0x54, 0x54, 0x4c, 0x12, 0x6b, 0x0a, 0x11, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0x6b,
	0x65, 0x79, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xae,
	0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5,
	0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe8, 0xa7, 0x82, 0xe6, 0xb5,
	0x8b, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x52, 0x10, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x67, 0x0a, 0x1a, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x65, 0x74, 0x63, 0x64, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92,
	0x41, 0x27, 0x32, 0x25, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe8, 0xa7, 0x82, 0xe6, 0xb5, 0x8b,
	0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0x65,
	0x74, 0x63, 0x64, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x17, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x74, 0x63, 0x64, 0x75,
	0x72, 0x6c, 0x12, 0x80, 0x01, 0x0a, 0x1e, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x3b, 0x92, 0x41, 0x38,
	0x32, 0x36, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe8, 0xa7, 0x82, 0xe6, 0xb5, 0x8b, 0xe6, 0xa8,
	0xa1, 0xe5, 0xbc, 0x8f, 0xe8, 0xbf, 0x9e, 0xe6, 0x8e, 0xa5, 0xe7, 0x9a, 0x84, 0x65, 0x74, 0x63,
	0x64, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe8, 0xb6, 0x85, 0xe6, 0x97, 0xb6,
	0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0x6d, 0x73, 0x52, 0x1b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x3a, 0x20, 0x92, 0x41, 0x1d, 0x0a, 0x1b, 0x2a, 0x0c, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x01, 0x2e, 0xd2, 0x01, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb1, 0x02, 0x0a, 0x0d, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe8,
	0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe5, 0x86, 0x85, 0xe5, 0x80, 0x99, 0xe9, 0x80, 0x89, 0xe8, 0x80,
	0x85, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x81,
	0x01, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x32, 0x3d, 0xe5,
	0x85, 0xa8, 0xe9, 0x83, 0xa8, 0xe5, 0x80, 0x99, 0xe9, 0x80, 0x89, 0xe8, 0x80, 0x85, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x2c, 0x6b, 0x65, 0x79, 0xe4, 0xb8, 0xba, 0xe5, 0x80, 0x99, 0xe9, 0x80,
	0x89, 0xe8, 0x80, 0x85, 0xe5, 0x90, 0x8d, 0x2c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xe4, 0xb8, 0xba,
	0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x1a, 0x37, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x2e, 0x92, 0x41, 0x2b,
	0x0a, 0x29, 0x2a, 0x0d, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0x22, 0xd3, 0x01, 0x0a, 0x0c,
	0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x68,
	0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0xa1, 0x86, 0xe5, 0xae,
	0x9a, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe5,
	0xbe, 0x85, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0x99, 0xe9, 0x80,
	0x89, 0xe8, 0x80, 0x85, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x3a, 0x3f, 0x92, 0x41, 0x3c, 0x0a, 0x3a, 0x2a, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2a, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0xe7, 0x89, 0xa9,
	0xe5, 0x93, 0x81, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x9c, 0xa8, 0xe8, 0x8c, 0x83, 0xe5,
	0x9b, 0xb4, 0xe5, 0x86, 0x85, 0xe7, 0x9a, 0x84, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x31, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x2c, 0x6b, 0x65, 0x79, 0xe4, 0xb8, 0xba, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xe4, 0xb8, 0xba, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0x9c, 0xa8, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe5, 0x86, 0x85, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a,
	0x1e, 0x92, 0x41, 0x1b, 0x0a, 0x19, 0x2a, 0x0f, 0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x06, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0x22,
	0xc4, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0xa1, 0x86, 0xe5, 0xae, 0x9a, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a,
	0xa1, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3a,
	0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe8, 0xa6, 0x81, 0xe8, 0xa7, 0x82, 0xe5,
	0xaf, 0x9f, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0x99, 0xe9, 0x80, 0x89, 0xe4, 0xba, 0xba, 0x52, 0x0a,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x3a, 0x2a, 0x92, 0x41, 0x27, 0x0a,
	0x25, 0x2a, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x32, 0x18, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xbb, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73,
	0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x65, 0x74, 0x61, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0x80, 0x99, 0xe9, 0x80,
	0x89, 0xe8, 0x80, 0x85, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe5, 0xbe, 0x97, 0xe5, 0x88, 0x86,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2b, 0x0a,
	0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32,
	0x14, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0xe5, 0x8d,
	0x95, 0xe4, 0xbd, 0x8d, 0x73, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x3a, 0x28, 0x92, 0x41, 0x25, 0x0a,
	0x23, 0x2a, 0x0d, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x32, 0x12, 0xe5, 0x80, 0x99, 0xe9, 0x80, 0x89, 0xe4, 0xba, 0xba, 0xe7, 0x9a, 0x84, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x22, 0xa0, 0x02, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d,
	0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x2e, 0xe5, 0x80, 0x99, 0xe9, 0x80, 0x89, 0xe8, 0x80,
	0x85, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe5, 0xbe, 0x97, 0xe5, 0x88, 0x86, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x2c, 0x6b, 0x65, 0x79, 0xe4, 0xb8, 0xba, 0xe5, 0x80, 0x99, 0xe9, 0x80, 0x89,
	0xe8, 0x80, 0x85, 0xe5, 0x90, 0x8d, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x59, 0x0a,
	0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74,
	0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x2d, 0x92, 0x41, 0x2a, 0x0a, 0x28, 0x2a,
	0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0x22, 0xe6, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe9, 0x92, 0x88, 0xe5, 0xaf, 0xb9, 0xe7,
	0x9a, 0x84, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe5, 0x80, 0x99, 0xe9, 0x80, 0x89, 0xe4, 0xba,
	0xba, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x68,
	0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x42,
	0x65, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe5,
	0x80, 0x99, 0xe9, 0x80, 0x89, 0xe4, 0xba, 0xba, 0xe8, 0xa6, 0x81, 0xe8, 0xae, 0xbe, 0xe7, 0xbd,
	0xae, 0xe7, 0x9a, 0x84, 0xe5, 0xbe, 0x97, 0xe5, 0x88, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x13,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x32, 0x1b, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a,
	0xa1, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0x22, 0xbe, 0x04, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x68, 0x6f, 0x6d, 0x70,
	0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0xa1, 0x86, 0xe5, 0xae, 0x9a, 0xe4, 0xb8,
	0x9a, 0xe5, 0x8a, 0xa1, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x7a, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f,
	0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0xe6, 0x98, 0xaf, 0xe9,
	0x87, 0x8d, 0xe7, 0xbd, 0xae, 0xe8, 0xbf, 0x98, 0xe6, 0x98, 0xaf, 0xe5, 0xa2, 0x9e, 0xe9, 0x87,
	0x8f, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x94, 0x01,
	0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x81, 0x01, 0x92, 0x41,
	0x7e, 0x32, 0x7c, 0x72, 0x65, 0x73, 0x65, 0x74, 0xe9, 0x94, 0xae, 0xe7, 0x9a, 0x84, 0xe8, 0xbf,
	0x87, 0xe6, 0x9c, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x2c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd,
	0x8d, 0x73, 0x2c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x2c,
	0xe5, 0x9c, 0xa8, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x80, 0xe6, 0xac, 0xa1, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe5, 0x90, 0x8e, 0xe5, 0x90, 0x8e, 0xe7, 0xbb, 0xad, 0xe5, 0x88, 0xb7, 0xe6, 0x96,
	0xb0, 0xe5, 0xb0, 0x86, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88, 0xe8, 0x80, 0x8c, 0xe6, 0x98, 0xaf,
	0xe6, 0xb2, 0xbf, 0xe7, 0x94, 0xa8, 0xe4, 0xb9, 0x8b, 0xe5, 0x89, 0x8d, 0xe7, 0x9a, 0x84, 0x52,
	0x03, 0x74, 0x74, 0x6c, 0x12, 0x78, 0x0a, 0x15, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32,
	0x18, 0xe8, 0xa6, 0x81, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x13, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x20,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x4e, 0x43, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x01,
	0x3a, 0x2f, 0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x2a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x32, 0x1b, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xb8, 0x9a, 0xe5,
	0x8a, 0xa1, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0x22, 0xca, 0x01, 0x0a, 0x17, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a,
	0x15, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74,
	0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x13, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x32, 0x92, 0x41, 0x2f, 0x0a,
	0x2d, 0x2a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x1b, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe7, 0x9a, 0x84, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0x22, 0xdf,
	0x01, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x68,
	0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0xa1, 0x86, 0xe5, 0xae,
	0x9a, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5,
	0x80, 0x92, 0xe5, 0x8f, 0x99, 0xe4, 0xbb, 0x8e, 0xe5, 0xa4, 0xa7, 0xe5, 0x88, 0xb0, 0xe5, 0xb0,
	0x8f, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x32, 0x12, 0xe5, 0xbe, 0x85, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe7, 0x9a, 0x84, 0xe5, 0xaf,
	0xb9, 0xe8, 0xb1, 0xa1, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x3a, 0x1e, 0x92, 0x41, 0x1b, 0x0a, 0x19, 0x2a, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x32, 0x0c, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe6, 0x8e, 0x92, 0xe7, 0xbb, 0xad,
	0x22, 0xa3, 0x01, 0x0a, 0x11, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09,
	0xe5, 0x80, 0x99, 0xe9, 0x80, 0x89, 0xe8, 0x80, 0x85, 0x52, 0x09, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0x80, 0x99, 0xe9, 0x80,
	0x89, 0xe8, 0x80, 0x85, 0xe7, 0x9a, 0x84, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x06, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x2f, 0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x2a, 0x11, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x32,
	0x15, 0xe5, 0xbe, 0x85, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0x99,
	0xe9, 0x80, 0x89, 0xe8, 0x80, 0x85, 0x22, 0xad, 0x01, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe6,
	0x8e, 0x92, 0xe5, 0xa5, 0xbd, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0xe7, 0x9a, 0x84, 0xe5, 0x80,
	0x99, 0xe9, 0x80, 0x89, 0xe8, 0x80, 0x85, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x11, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x3a, 0x24, 0x92, 0x41, 0x21, 0x0a, 0x1f, 0x2a, 0x0c, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x0f, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe7, 0x9a, 0x84,
	0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0x22, 0xcb, 0x01, 0x0a, 0x08, 0x54, 0x6f, 0x70, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x32, 0x12, 0xe6, 0xa1, 0x86, 0xe5, 0xae, 0x9a, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe8, 0x8c,
	0x83, 0xe5, 0x9b, 0xb4, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe7, 0xbb, 0x99, 0xe5, 0x87, 0xba, 0xe5, 0x80, 0x99, 0xe9,
	0x80, 0x89, 0xe4, 0xba, 0xba, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x0a, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x3a, 0x3b, 0x92, 0x41, 0x38, 0x0a, 0x36, 0x2a, 0x08,
	0x54, 0x6f, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x32, 0x2a, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0xe5, 0x80, 0x99, 0xe9, 0x80, 0x89, 0xe8, 0x80, 0x85, 0xe4, 0xb8, 0xad, 0xe5, 0x8f, 0xaf, 0xe8,
	0x83, 0xbd, 0xe6, 0x80, 0xa7, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0x9a, 0x84, 0xe9, 0x82,
	0xa3, 0xe4, 0xb8, 0xaa, 0x22, 0x81, 0x01, 0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0x8f,
	0xaf, 0xe8, 0x83, 0xbd, 0xe6, 0x80, 0xa7, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0x9a, 0x84,
	0xe5, 0x80, 0x99, 0xe9, 0x80, 0x89, 0xe4, 0xba, 0xba, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x3a, 0x32, 0x92, 0x41, 0x2f, 0x0a, 0x2d, 0x2a, 0x0b, 0x54, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe6, 0x80, 0xa7, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe7,
	0x9a, 0x84, 0xe9, 0x82, 0xa3, 0xe4, 0xb8, 0xaa, 0x32, 0xda, 0x09, 0x0a, 0x10, 0x54, 0x48, 0x4f,
	0x4d, 0x50, 0x53, 0x4f, 0x4e, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x4e, 0x47, 0x12, 0x83, 0x01,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1e, 0x2e, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x92, 0x41, 0x2c, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1b, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0x9a, 0x84, 0xe5, 0x9f,
	0xba, 0xe7, 0xa1, 0x80, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x2a, 0x07, 0x67, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0xc8, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0x1f, 0x2e,
	0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x92, 0x41, 0x69, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x21, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4,
	0xe7, 0x9a, 0x84, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x1a,
	0x2f, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0xe7, 0x89, 0xb9,
	0xe6, 0x80, 0xa7, 0xe5, 0xb9, 0xb6, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x65, 0x74, 0x63, 0x64,
	0x2a, 0x0c, 0x67, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xd1,
	0x01, 0x0a, 0x07, 0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1e, 0x2e, 0x74, 0x68, 0x6f,
	0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x21, 0x2e, 0x74, 0x68, 0x6f,
	0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x92, 0x41, 0x64, 0x0a, 0x05,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x21, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8c, 0x87,
	0xe5, 0xae, 0x9a, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe7, 0x9a, 0x84, 0xe5, 0xbd, 0x93, 0xe5,
	0x89, 0x8d, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x1a, 0x2f, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81,
	0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xe5, 0xb9, 0xb6, 0xe9,
	0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x65, 0x74, 0x63, 0x64, 0x2a, 0x07, 0x69, 0x6e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73,
	0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x27, 0x2e,
	0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x92, 0x41,
	0x49, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4,
	0xe5, 0x86, 0x85, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0xe7, 0x9a, 0x84, 0xe5, 0xbd, 0x93, 0xe5,
	0x89, 0x8d, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x2a, 0x10, 0x67, 0x65, 0x74, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xb5, 0x01, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x2e, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x29, 0x2e, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f,
	0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x33, 0x0a,
	0x09, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe5, 0x80, 0x99, 0xe9, 0x80, 0x89, 0xe8, 0x80, 0x85, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0x2a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x2e, 0x74, 0x68,
	0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x61, 0x6e, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1e, 0x2e, 0x74, 0x68, 0x6f, 0x6d, 0x70,
	0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x61, 0x6e, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x22, 0x0a, 0x09, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe5, 0x80,
	0x99, 0xe9, 0x80, 0x89, 0xe9, 0x9b, 0x86, 0x2a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x95, 0x01,
	0x0a, 0x03, 0x54, 0x6f, 0x70, 0x12, 0x1a, 0x2e, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x6f, 0x70, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x1d, 0x2e, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x70, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x33, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe6, 0x80, 0xa7, 0xe6, 0x9c,
	0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0x99, 0xe9, 0x80, 0x89, 0xe8, 0x80, 0x85,
	0x2a, 0x03, 0x54, 0x6f, 0x70, 0x42, 0xea, 0x01, 0x5a, 0x15, 0x2e, 0x2f, 0x74, 0x68, 0x6f, 0x6d,
	0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x92,
	0x41, 0xcf, 0x01, 0x12, 0x74, 0x0a, 0x10, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x59, 0x0a, 0x0a, 0x68, 0x73, 0x7a, 0x31, 0x32,
	0x37, 0x33, 0x33, 0x32, 0x37, 0x12, 0x35, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x6d, 0x61,
	0x74, 0x65, 0x2f, 0x74, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x72, 0x70, 0x63, 0x1a, 0x14, 0x68, 0x73,
	0x7a, 0x31, 0x32, 0x37, 0x33, 0x33, 0x32, 0x37, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x32, 0x05, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2a, 0x03, 0x01, 0x02, 0x04, 0x32, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x32, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x2d,
	0x66, 0x6f, 0x6f, 0x2d, 0x6d, 0x69, 0x6d, 0x65, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x16, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x2d, 0x66, 0x6f, 0x6f, 0x2d, 0x6d, 0x69,
	0x6d, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescOnce sync.Once
	file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescData = file_pbschema_thompsonsampling_thompsonsampling_proto_rawDesc
)

func file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescGZIP() []byte {
	file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescOnce.Do(func() {
		file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescData)
	})
	return file_pbschema_thompsonsampling_thompsonsampling_proto_rawDescData
}

var file_pbschema_thompsonsampling_thompsonsampling_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_pbschema_thompsonsampling_thompsonsampling_proto_goTypes = []interface{}{
	(CandidateUpdateQuery_UpdateMod)(0), // 0: thompsonsampling.CandidateUpdateQuery.UpdateMod
	(*Scope)(nil),                       // 1: thompsonsampling.Scope
	(*BetaParam)(nil),                   // 2: thompsonsampling.BetaParam
	(*NamespaceSetting)(nil),            // 3: thompsonsampling.NamespaceSetting
	(*MetaResponse)(nil),                // 4: thompsonsampling.MetaResponse
	(*ScopeResponse)(nil),               // 5: thompsonsampling.ScopeResponse
	(*InScopeQuery)(nil),                // 6: thompsonsampling.InScopeQuery
	(*InScopeResponse)(nil),             // 7: thompsonsampling.InScopeResponse
	(*CandidateInfoQuery)(nil),          // 8: thompsonsampling.CandidateInfoQuery
	(*CandidateInfo)(nil),               // 9: thompsonsampling.CandidateInfo
	(*CandidateInfoResponse)(nil),       // 10: thompsonsampling.CandidateInfoResponse
	(*CandidateUpdateInfo)(nil),         // 11: thompsonsampling.CandidateUpdateInfo
	(*CandidateUpdateQuery)(nil),        // 12: thompsonsampling.CandidateUpdateQuery
	(*CandidateUpdateResponse)(nil),     // 13: thompsonsampling.CandidateUpdateResponse
	(*RankQuery)(nil),                   // 14: thompsonsampling.RankQuery
	(*WeightedCandidate)(nil),           // 15: thompsonsampling.WeightedCandidate
	(*RankResponse)(nil),                // 16: thompsonsampling.RankResponse
	(*TopQuery)(nil),                    // 17: thompsonsampling.TopQuery
	(*TopResponse)(nil),                 // 18: thompsonsampling.TopResponse
	nil,                                 // 19: thompsonsampling.ScopeResponse.ListEntry
	nil,                                 // 20: thompsonsampling.InScopeResponse.ResultEntry
	nil,                                 // 21: thompsonsampling.CandidateInfoResponse.InfosEntry
	(*emptypb.Empty)(nil),               // 22: google.protobuf.Empty
}
var file_pbschema_thompsonsampling_thompsonsampling_proto_depIdxs = []int32{
	3,  // 0: thompsonsampling.MetaResponse.namespace_setting:type_name -> thompsonsampling.NamespaceSetting
	19, // 1: thompsonsampling.ScopeResponse.list:type_name -> thompsonsampling.ScopeResponse.ListEntry
	1,  // 2: thompsonsampling.InScopeQuery.scope:type_name -> thompsonsampling.Scope
	20, // 3: thompsonsampling.InScopeResponse.result:type_name -> thompsonsampling.InScopeResponse.ResultEntry
	1,  // 4: thompsonsampling.CandidateInfoQuery.scope:type_name -> thompsonsampling.Scope
	2,  // 5: thompsonsampling.CandidateInfo.param:type_name -> thompsonsampling.BetaParam
	21, // 6: thompsonsampling.CandidateInfoResponse.infos:type_name -> thompsonsampling.CandidateInfoResponse.InfosEntry
	2,  // 7: thompsonsampling.CandidateUpdateInfo.param:type_name -> thompsonsampling.BetaParam
	1,  // 8: thompsonsampling.CandidateUpdateQuery.scope:type_name -> thompsonsampling.Scope
	0,  // 9: thompsonsampling.CandidateUpdateQuery.update_type:type_name -> thompsonsampling.CandidateUpdateQuery.UpdateMod
	11, // 10: thompsonsampling.CandidateUpdateQuery.candidate_update_info:type_name -> thompsonsampling.CandidateUpdateInfo
	11, // 11: thompsonsampling.CandidateUpdateResponse.candidate_update_info:type_name -> thompsonsampling.CandidateUpdateInfo
	1,  // 12: thompsonsampling.RankQuery.scope:type_name -> thompsonsampling.Scope
	15, // 13: thompsonsampling.RankResponse.ordered_candidates:type_name -> thompsonsampling.WeightedCandidate
	1,  // 14: thompsonsampling.TopQuery.scope:type_name -> thompsonsampling.Scope
	9,  // 15: thompsonsampling.CandidateInfoResponse.InfosEntry.value:type_name -> thompsonsampling.CandidateInfo
	22, // 16: thompsonsampling.THOMPSONSAMPLING.GetMeta:input_type -> google.protobuf.Empty
	1,  // 17: thompsonsampling.THOMPSONSAMPLING.GetScopeInfo:input_type -> thompsonsampling.Scope
	6,  // 18: thompsonsampling.THOMPSONSAMPLING.InScope:input_type -> thompsonsampling.InScopeQuery
	8,  // 19: thompsonsampling.THOMPSONSAMPLING.GetCandidateInfo:input_type -> thompsonsampling.CandidateInfoQuery
	12, // 20: thompsonsampling.THOMPSONSAMPLING.UpdateCandidate:input_type -> thompsonsampling.CandidateUpdateQuery
	14, // 21: thompsonsampling.THOMPSONSAMPLING.Rank:input_type -> thompsonsampling.RankQuery
	17, // 22: thompsonsampling.THOMPSONSAMPLING.Top:input_type -> thompsonsampling.TopQuery
	4,  // 23: thompsonsampling.THOMPSONSAMPLING.GetMeta:output_type -> thompsonsampling.MetaResponse
	5,  // 24: thompsonsampling.THOMPSONSAMPLING.GetScopeInfo:output_type -> thompsonsampling.ScopeResponse
	7,  // 25: thompsonsampling.THOMPSONSAMPLING.InScope:output_type -> thompsonsampling.InScopeResponse
	10, // 26: thompsonsampling.THOMPSONSAMPLING.GetCandidateInfo:output_type -> thompsonsampling.CandidateInfoResponse
	13, // 27: thompsonsampling.THOMPSONSAMPLING.UpdateCandidate:output_type -> thompsonsampling.CandidateUpdateResponse
	16, // 28: thompsonsampling.THOMPSONSAMPLING.Rank:output_type -> thompsonsampling.RankResponse
	18, // 29: thompsonsampling.THOMPSONSAMPLING.Top:output_type -> thompsonsampling.TopResponse
	23, // [23:30] is the sub-list for method output_type
	16, // [16:23] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_pbschema_thompsonsampling_thompsonsampling_proto_init() }
func file_pbschema_thompsonsampling_thompsonsampling_proto_init() {
	if File_pbschema_thompsonsampling_thompsonsampling_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetaParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InScopeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InScopeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandidateInfoQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandidateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandidateInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandidateUpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandidateUpdateQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandidateUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeightedCandidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbschema_thompsonsampling_thompsonsampling_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pbschema_thompsonsampling_thompsonsampling_proto_goTypes,
		DependencyIndexes: file_pbschema_thompsonsampling_thompsonsampling_proto_depIdxs,
		EnumInfos:         file_pbschema_thompsonsampling_thompsonsampling_proto_enumTypes,
		MessageInfos:      file_pbschema_thompsonsampling_thompsonsampling_proto_msgTypes,
	}.Build()
	File_pbschema_thompsonsampling_thompsonsampling_proto = out.File
	file_pbschema_thompsonsampling_thompsonsampling_proto_rawDesc = nil
	file_pbschema_thompsonsampling_thompsonsampling_proto_goTypes = nil
	file_pbschema_thompsonsampling_thompsonsampling_proto_depIdxs = nil
}
